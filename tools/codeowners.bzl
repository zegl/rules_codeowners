def _codeowners_impl(ctx):
    ctx.actions.run_shell(
        outputs = [ctx.outputs.outfile],
        command = "echo /$PATH $TEAM > \"$OUTFILE\"",
        env = {
            "TEAM": ctx.attr.team,
            "PATH": ctx.label.package,
            "OUTFILE": ctx.outputs.outfile.path
        }
    )

codeowners = rule(
    implementation = _codeowners_impl,
    attrs = {
        "team": attr.string(),
    },
    outputs = {
        "outfile": "%{name}.out",
    },
)

def _generate_codeowners_impl(ctx):
    all_ownerships = []
    all_ownerships_files = []
    for owner in ctx.attr.owners:
        all_ownerships.append(owner.files.to_list()[0].path)
        all_ownerships_files.append(owner.files.to_list()[0])

    ctx.actions.run_shell(
        outputs = [ctx.outputs.outfile],
        inputs = all_ownerships_files,
        arguments = all_ownerships,
        env = {
            "OUTFILE": ctx.outputs.outfile.path,
        },
        command = """
set -euo pipefail

echo "This file was generated by rules_codeowners / Bazel" >> "$OUTFILE"
echo "Don't edit it directly" >> "$OUTFILE"
echo "" >> "$OUTFILE"

for file in "$@"
do
    cat $file >> "$OUTFILE"
done
        """,
    )

generate_codeowners = rule(
    implementation = _generate_codeowners_impl,
    attrs = {
        "owners" : attr.label_list(),
    },
    outputs = {
        "outfile": "%{name}",
    },
)
